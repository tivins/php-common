<?php

namespace Tivins\Core\Proc;


use Tivins\Core\StrUtil;

class AsciiProcess extends Process
{
    private float  $time;
    private array  $data = [];
    private string $cast = '';
    private string $raw = '';


    public static function buildCast(Command $command): string
    {
        $proc = new static();
        $info = $proc->run($command, 10);
        return $proc->getCast();
    }

    public function getCast(): string
    {
        return $this->cast;
    }

    public function getRaw(): string
    {
        return $this->raw;
    }
    public function onStart(): void
    {
        parent::onStart(); // TODO: Change the autogenerated stub
        $this->time   = microtime(true);
        $this->data[] = [
            0,
            'o',
            '[01;32mme@hostname[00m:[01;34m/[00m$ run.php' . "\r\n",
        ];
    }

    public function onUpdate(array $status, array $received): void
    {
        $in = $received[Process::STDOUT];
        if (!$in) return;

        $in = StrUtil::hideIPs($in);

        $this->raw .= $in;
        $this->data[] = [
            microtime(true) - $this->time,
            'o',
            str_replace("\n", "\r\n", $in)
        ];
        parent::onUpdate($status, $received);
    }

    public function onFinish(): void
    {
        parent::onFinish(); // TODO: Change the autogenerated stub
        $this->data[] = [
            microtime(true) - $this->time,
            'o',
            '[01;32mme@hostname[00m:[01;34m/[00m$ ',
        ];
        $json         = [
            'version'   => 2,
            'width'     => 80,
            'height'    => 10,
            'timestamp' => time(),
            'env'       => [
                'SHELL' => '/bin/bash',
                'TERM'  => 'xterm-256color'
            ]
        ];

        $this->cast = json_encode($json) . "\n";
        $this->cast .= join("\n", array_map('json_encode', $this->data));
    }
}
