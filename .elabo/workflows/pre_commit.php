#!/usr/bin/env php
<?php

use Tivins\Core\System\File;
use Tivins\Core\System\FileSys;

require 'vendor/autoload.php';

class AsciiProcess extends \Tivins\Core\Proc\Process
{
    private float $time;
    private array $data = [];
    private string $cast = '';

    public function getCast(): string {
        return $this->cast;
    }

    public function onStart(): void
    {
        parent::onStart(); // TODO: Change the autogenerated stub
        $this->time = microtime(true);
        $this->data[] = [
            0,
            'o',
            '[01;32mme@hostname[00m:[01;34m/path/run[00m$ run.php'."\r\n",
        ];
    }

    public function onUpdate(array $status, array $received): void
    {
        $in = $received[\Tivins\Core\Proc\Process::STDOUT];
        if (!$in) return;

        $this->data[] = [
            microtime(true) - $this->time,
            "o",
            $in
        ];
        parent::onUpdate($status, $received);
    }

    public function onFinish(): void
    {
        parent::onFinish(); // TODO: Change the autogenerated stub
        $json = [
            'version' => 2,
            'width' => 80,
            'height' => 24,
            'timestamp' => time(),
            'env' => [
                'SHELL' => '/bin/bash',
                'TERM' => 'xterm-256color'
            ]
        ];

        $this->cast = json_encode($json)."\n";
        $this->cast .= join("\n", array_map('json_encode', $this->data));
    }
}

$it = FileSys::getIterator('docs/src');
foreach ($it as $file) {
    if ($file->isDir()) continue;
    cliConvertMarkdown($file->getPathName());
}

function cliConvertMarkdown(string $inFile): void
{
    echo "Converting $inFile...\n";
    try {
        convertMarkdown($inFile);
    } catch (Exception $ex) {
        echo ">> " . $ex->getMessage() . "\n";
    }
}
function convertAscii(array $matches): string
{
    $phpFile = getcwd() . '/' . $matches[1];
    $outFile = getcwd() . '/' . str_replace('.php', '.cast', $matches[1]);
    $phpCode = File::load($phpFile);
    $output  = File::load($outFile);
    //
    $command = new \Tivins\Core\Proc\Command('php', $phpFile);
    $proc = new AsciiProcess();
    $info = $proc->run($command,10);
    //
    File::save($outFile, $proc->getCast());
    return '
<div id="demo"></div>
<script src="/php-common/asciinema-player.min.js"></script>
<script>AsciinemaPlayer.create(\'/php-common/'.basename($outFile).'\', document.getElementById(\'demo\'));</script>';
}

function convertCode($matches): string
{
    $phpFile = getcwd() . '/' . $matches[1];
    $outFile = getcwd() . '/' . str_replace('.php', '.out', $matches[1]);
    $phpCode = File::load($phpFile);
    $output  = File::load($outFile);
    if (!$output) {
        $output = safe(shell_exec('php ' . $phpFile));
    }
    File::save($outFile, $output);
    return "```php\n$phpCode\n```\n\n"
        . "<details><summary>Output</summary>\n\n<pre>"
        . "\n$output\n</pre>\n"
        . "</details>\n\n";
}

/**
 * @throws Exception
 */
function convertMarkdown(string $inFile): void
{
    $outFile = str_replace('/src/', '/build/', $inFile);
    $content = File::load($inFile);
    if (!$content) {
        throw new Exception('no-content');
    }
    $content = preg_replace_callback('~{{{ runCinema \| (.*?) }}}~', 'convertAscii', $content);
    $content = preg_replace_callback('~{{{ run \| (.*?) }}}~', 'convertCode', $content);
    File::save($outFile, $content);
}

function safe(string $s): string
{
    return preg_replace('~\d+.\d+.\d+.\d+~', 'xx.xx.xx.xx', $s);
}